# World coordinates go from left to right, bottom to top
# and use one-based indexing.

sprite Main {
    let world-width = 64
    let world-height = 48
    let tiles = [] as List[Num]

    inline fn world-width -> Num {
        world-width
    }

    inline fn world-height -> Num {
        world-height
    }

    # This is not bounds-checked.
    inline fn index-for-tile-at(x x: Num, y y: Num) -> Num {
        (x - 1) * world-height + y
    }

    inline fn tile-at(x x: Num, y y: Num) -> Num {
        tiles.at(index-for-tile-at(x: x, y: y))
    }

    inline fn set-tile-at(x x: Num, y y: Num, to tile: Num) {
        tiles.replace(index: index-for-tile-at(x: x, y: y), with: tile)
    }

    fn create-world {
        let mean-ground-level = world-height / 2
        let y-variation = 6

        tiles.delete-all()
        repeat world-width * world-height {
            tiles.push(1)
        }
        for x world-width {
            let ground = random(within: y-variation, of: mean-ground-level)
            for y ground {
                set-tile-at(x: x, y: y, to: 4)
            }
        }
    }
}

inline fn random(within variation: Num, of mean: Num) -> Num {
    random(between: mean - variation, and: mean + variation)
}
