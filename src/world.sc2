# World coordinates go from left to right, bottom to top
# and use one-based indexing.

sprite Main {
    let world-width = 512
    let world-height = 128
    let tiles = [] as List[Num]

    let mean-ground-level = 64
    let y-variation = 6

    inline fn world-width -> Num {
        world-width
    }

    inline fn world-height -> Num {
        world-height
    }

    # This is not bounds-checked.
    inline fn index-for-tile-at(x x: Num, y y: Num) -> Num {
        (x - 1) * world-height + y
    }

    inline fn tile-at(x x: Num, y y: Num) -> Num {
        tiles.at(index-for-tile-at(x: x, y: y))
    }

    inline fn set-tile-at(x x: Num, y y: Num, to tile: Num) {
        tiles.replace(index: index-for-tile-at(x: x, y: y), with: tile)
    }

    fn create-world {
        tiles.delete-all()
        repeat world-width * world-height {
            tiles.push(1)
        }
        create-basic-terrain()
        repeat world-width * 0.5 {
            create-ore-cluster()
        }
    }

    inline fn create-basic-terrain {
        let noise-scale = 8
        let rand = [] as List[Num]
        repeat ceil(world-width / noise-scale) + 1 {
            rand.push(random(within: y-variation, of: mean-ground-level))
        }

        let tree-distance = 0
        for x world-width {
            let p0 = rand.at(floor(x / noise-scale) + 1)
            let p1 = rand.at(floor(x / noise-scale) + 2)
            let frac = (cos(180 * (1 - (x / noise-scale % 1))) + 1) * 0.5
            let ground = lerp(p0, p1, at: frac)

            let dirt-depth = random(between: 1, and: 4)
            for y ground - dirt-depth - 1 {
                set-tile-at(x: x, y: y + 1, to: 4)
            }
            for y dirt-depth {
                set-tile-at(x: x, y: ground - y, to: 3)
            }
            set-tile-at(x: x, y: ground, to: 2)
            set-tile-at(x: x, y: 1, to: 5)
            if (tree-distance > 4).and(random(between: 0, and: 4) == 0) {
                create-tree-at(x: x, y: ground)
                &tree-distance = 0
            } else {
                &tree-distance = tree-distance + 1
                if random(between: 0, and: 6) == 0 {
                    set-tile-at(
                        x: x,
                        y: ground + 1,
                        to: random(between: 11, and: 12),
                    )
                }
            }
        }
    }

    inline fn create-ore-cluster {
        let kind = random(between: 7, and: 10)
        let x = random(between: 1, and: world-width)
        let y = random(between: 1, and: mean-ground-level)
        # Believe it or not, this does not need to be bounds-checked.
        # If `x` goes out of bounds then `tile-at` returns the empty string and
        # if `y` goes out of bounds then we get some tile above ground.
        # Either way, the loop ends.
        while tile-at(x: x, y: y) == 4 {
            set-tile-at(x: x, y: y, to: kind)
            &x = x + random(within: 2, of: 0)
            &y = y + random(within: 1, of: 0)
        }
    }

    fn create-tree-at(x x: Num, y y: Num) {
        let log = 13
        let leaves = 14
        let height = random(between: 3, and: 5)
        for i height {
            set-tile-at(x: x, y: y + i, to: log)
        }
        let y = y + height
        set-tile-at(x: x - 2, y: y - 1, to: leaves)
        set-tile-at(x: x - 2, y: y, to: leaves)
        set-tile-at(x: x - 1, y: y - 1, to: leaves)
        set-tile-at(x: x - 1, y: y, to: leaves)
        set-tile-at(x: x - 1, y: y + 1, to: leaves)
        set-tile-at(x: x - 1, y: y + 2, to: leaves)
        set-tile-at(x: x, y: y + 1, to: leaves)
        set-tile-at(x: x, y: y + 2, to: leaves)
        set-tile-at(x: x + 1, y: y - 1, to: leaves)
        set-tile-at(x: x + 1, y: y, to: leaves)
        set-tile-at(x: x + 1, y: y + 1, to: leaves)
        set-tile-at(x: x + 1, y: y + 2, to: leaves)
        set-tile-at(x: x + 2, y: y - 1, to: leaves)
        set-tile-at(x: x + 2, y: y, to: leaves)
    }
}

inline fn random(within variation: Num, of mean: Num) -> Num {
    random(between: mean - variation, and: mean + variation)
}

inline fn lerp(_ a: Num, _ b: Num, at t: Num) -> Num {
    a + (b - a) * t
}
